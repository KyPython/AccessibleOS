services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: accessibleos-postgres
    environment:
      POSTGRES_DB: accessibleos
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/backend/src/database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: accessibleos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: ./packages/backend/Dockerfile
    container_name: accessibleos-backend
    environment:
      NODE_ENV: development
      PORT: 3001
      AUTH_STUB: "true"
      ENABLE_DEMO_SEED: "true"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: accessibleos
      DB_USER: postgres
      DB_PASSWORD: password
      REDIS_URL: redis://redis:6379
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Do not bind-mount the backend source in production image builds.
      # Mounting ./packages/backend would hide the compiled /app/dist produced
      # in the image. Keep node_modules as anonymous volume if needed.
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: ./packages/web/Dockerfile
      args:
        VITE_API_BASE_URL: http://backend:3001/api
    container_name: accessibleos-web
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: accessibleos-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: accessibleos-network